schema {
  query: Query
  mutation: Mutation
}

type CreateDepositPayload {
  deposit: Deposit
}

type Deposit {
  id: Int!
  questionId: String!
  amount: Float!
  status: String!
}

"A connection to a list of items."
type DepositsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DepositsEdge!]
  "A flattened list of the nodes."
  nodes: [Deposit!]
}

"An edge in a connection."
type DepositsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Deposit!
}

type Mutation {
  createDeposit(input: CreateDepositInput!): CreateDepositPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  deposit(questionId: String!): Deposit
  deposits("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [DepositSortInput!] where: DepositFilterInput): DepositsConnection
}

input CreateDepositInput {
  questionId: String!
  amount: Float!
}

input DepositFilterInput {
  and: [DepositFilterInput!]
  or: [DepositFilterInput!]
  id: IntOperationFilterInput
  questionId: StringOperationFilterInput
  amount: FloatOperationFilterInput
  status: StringOperationFilterInput
}

input DepositSortInput {
  id: SortEnumType
  questionId: SortEnumType
  amount: SortEnumType
  status: SortEnumType
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum SortEnumType {
  ASC
  DESC
}